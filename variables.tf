variable "gzip_content" {
  type        = list(any)
  description = "Default types of gzip content types"
  default = [
    "application/javascript",
    "application/json",
    "application/vnd.ms-fontobject",
    "application/x-font-opentype",
    "application/x-font-truetype",
    "application/x-font-ttf",
    "application/x-javascript",
    "application/xml",
    "font/eot",
    "font/opentype",
    "font/otf",
    "image/svg+xml",
    "image/vnd.microsoft.icon",
    "text/css",
    "text/html",
    "text/javascript",
    "text/plain",
    "text/xml",
  ]
}

variable "gzip_extensions" {
  type        = list(any)
  description = "Default extension types for gzip"
  default = [
    "css",
    "eot",
    "html",
    "ico",
    "js",
    "json",
    "otf",
    "svg",
    "ttf",
  ]
}

variable "gzip_name" {
  type        = string
  description = "Default gzip policy name"
  default     = "Generated by default gzip policy"
}

variable "service_name" {
  type = string
}

variable "default_ttl" {
  default = 3600
  type    = number
}

variable "stale_if_error" {
  default = true
  type    = bool
}

variable "stale_if_error_ttl" {
  default = 43200
  type    = number
}

variable "action" {
  default = "pass"
  type    = string
}

variable "default_host" {
  default = ""
  type    = string
}

variable "version_comment" {
  default = ""
  type    = string
}

variable "cache_condition" {
  default = "Cache-Control"
  type    = string
}

variable "cach_name" {
  default = "Cache-Control != Public"
  type    = string
}

variable "stale_ttl" {
  default = 3600
  type    = number
}

variable "ttl" {
  default = 0
  type    = number
}

variable "conditions" {
  description = "List of conditions"
  default = [
    {
      name      = "Cache-Control"
      priority  = 10
      statement = "!beresp.http.Cache-Control ~ \"(public)\""
      type      = "CACHE"
    }
  ]
}

variable "domains" {
  type = list(object({
    name = string
  }))
  description = "List of domains"
  default     = []
}

variable "backends" {
  description = "List of backends"
  default = [
    {
      address               = "stage-origin.foo.com"
      auto_loadbalance      = false
      between_bytes_timeout = 10000
      connect_timeout       = 1000
      error_threshold       = 0
      first_byte_timeout    = 15000
      max_conn              = 400
      name                  = "stage-origin.foo.com"
      port                  = 443
      shield                = "chi-il-us"
      request_condition     = ""
      ssl_cert_hostname     = "*.foo.com"
      ssl_check_cert        = true
      ssl_sni_hostname      = "stage-origin.foo.com"
      use_ssl               = true
      weight                = 100
    }
  ]
}

variable "snippets" {
  type = list(object({
    content  = string,
    name     = string,
    priority = number,
    type     = string
  }))
  description = "List of VCL snippet"
  default     = []
}

variable "vcl_configs" {
  type = list(object({
    content = string,
    name    = string,
    main    = bool,
  }))
  description = "List of VCL"
  default     = []
}

variable "dictionaries" {
  type = list(object({
    name = string
  }))
  description = "List of dictionaries"
  default     = []
}

variable "bigquerylogging_configs" {
  description = "List of bigquery logging configs"
  default     = []
}

variable "kafkalogging_configs" {
  description = "List of kafka logging configs"
  default     = []
}

variable "gcslogging_configs" {
  description = "List of GCS logging configs"
  default     = []
}

variable "s3logging_configs" {
  description = "List of S3 logging configs"
  default     = []
}

variable "acls" {
  description = "List of ACL's"
  default     = []
}

variable "healthcheck" {
  default = null
  type    = string
}

variable "healthchecks" {
  description = "List of health checks"
  default     = []
}

variable "response_objects" {
  description = "List of response objects"
  default     = []
}

variable "unmanaged_acls" {
  description = "List of acls to be managed outside terraform"
  type        = list(string)
  default     = []
}
